
@startuml UML


package Data_types {
    enum Wildlife
    enum Biome
    enum Direction
    enum Rotation
    struct Offset {
        + getCol() const : int
        + getRow() const : int
        + Offset(int c, int r)
        - col : int
        - row : int
    }
}


package GameActors {
    package Menus {
        abstract Menu {
            - T* m_results
            - int m_nb_result;

            + Iterator getIterator() const
            + Menu()
            + ~Menu()
            + addResult(const T& tar) : void
            + {abstract} void show()
        }
        class Menu::Iterator{
            - const Menu& m_menu
            - int m_nb

            + Iterator(const Menu& tar)
            + bool isDone() const
            + Iterator& operator++(int a)
            + T getValue() const
        }

        Menu <|-- Menu::Iterator
        Menu <|-- NotifiableInterface
        Menu <|-- GMenu
        Menu <|-- CMenu

        package COMenus {
            abstract CMenu {
                - unsigned int m_x_size
                + {abstract} void show()
                + void setX(unsigned int x)
                + unsigned int getX() const
            }
            class CGameMenu{
                + CGameMenu(NotifiableInterface *tar);
                + void show() override;
            }
            class CPlayerMenu{
                - int m_result 
                + CPlayerMenu()
                + void show()
            }
            CMenu <|-- CGameMenu
            CMenu <|-- CPlayerMenu
        }
        package GXMenus {
            abstract GMenu {
                - unsigned int m_size_x
                - unsigned int m_size_y
                - unsigned int m_pos_x
                - unsigned int m_pos_y
                ~ NotifiableInterface* m_target

                + GMenu(NotifiableInterface* target, QWidget* parent, unsigned int size_x, unsigned int size_y, unsigned int pos_x, unsigned int pos_y)
                + void actualize();
                + void show();
                + void setSizeX(unsigned int x)
                + void setSizeY(unsigned int y)
                + void setPosX(unsigned int x)
                + void setPosY(unsigned int y)
                + unsigned int getSizeX() const
                + unsigned int getSizeY() const
                + unsigned int getPosX() const
                + unsigned int getPosY() const
            }
            class GGameMenu {
                - m_main_layout: QGridLayout* = nullptr
                - m_label: QLabel* = nullptr
                - m_label_exp_recover: QLabel* = nullptr
                - m_label_exp_load_extension: QLabel* = nullptr
                - m_label_exp_cards: QLabel* = nullptr

                - m_btn_recover: QPushButton* = nullptr
                - m_btn_load_extension: QPushButton* = nullptr
                - m_btn_validate: QPushButton* = nullptr

                - m_line_edit_cards: QLineEdit* = nullptr

                + GGameMenu(tar: NotifiableInterface*)
                + show(): void
                + validate(): void
                + usePreviousGame(): void
                + loadExtension(): void
            }
            class GPlayerMenu {
                - QGridLayout* m_main_layout
                - QPushButton* m_btn_quit
                - QPushButton* m_btn_validate
                - QLabel* m_label
                - QSpinBox* m_spinbox
                - QLineEdit** m_lines_names
                - QLabel** m_label_names
            -  unsigned short m_nb_player

                + GPlayerMenu(NotifiableInterface* tar)
                + ~GPlayerMenu()
                + void validateNumber()
                + void validateNames()
                + void show()
            }
            GMenu <|-- GGameMenu
            GMenu  <|-- GPlayerMenu
        }
    }

    package GraphicalComponents {
        package Console {
            class CPlayerBoard {
                - m_max_height: const unsigned short int = 42
                - m_max_width: const unsigned short int = 140
                - m_x_swift: unsigned short int = 0
                - m_y_swift: unsigned short int = 0
                + CPlayerBoard()
                + show(): void
            }
            class CDeckTile {
                - unsigned short int const m_max_height
                - unsigned short int const m_max_width
                + CDeckTile()
                + void show()
            }
        }

        package GraphX {
            class GDeckCard {
                + GDeckCard()
            }
            class GPlayerBoard{
                + GPlayerBoard()
            } 
            class WidgetHexBoard {
                - max_size: int
                - m_layout: QVBoxLayout*
                + WidgetHexBoard(parent: QWidget* = nullptr, size: int = 41)
                + ~WidgetHexBoard() = default
                + initHexTiles(): void
                + addTile(x: int, y: int): void
                <<signal>>
            }
        }
    }

    class Player {
        - m_name: std::string
        - m_id: const unsigned int
        - m_score: unsigned int = 0
        - nb_players: static unsigned int
        - m_tiles: std::vector<GameTile*>
        - m_tokens: std::vector<WildlifeToken*>
        - m_board: PlayerBoard* = nullptr
        - m_tiles_scores: std::vector<double>
        - m_tokens_scores: std::vector<double>

        + Player(name: const std::string&)
        + Player(const Player&) = default
        + getNbPlayers(): static int
        + getName() const: const std::string
        + getId() const: unsigned int
        + getScore() const: unsigned int
        + getBoard() const: PlayerBoard*
        + getTilesScores() const: std::vector<double>
        + getTokensScores() const: std::vector<double>

        + setName(name: const std::string&): void
        + addScore(points: unsigned int): void
        + setTilesScores(scores: const std::vector<double>&): void
        + setTokensScores(scores: const std::vector<double>&): void
        + addTile(tile: GameTile*): void
        + addToken(token: WildlifeToken*): void
        + setBoard(board: PlayerBoard*): void
        + ~Player()
        + getSaveString() const:
    }

    class Game {
        - m_nb_players: unsigned short = 0
        - m_player_menu: Menu<std::string>*
        - m_game_menu: Menu<std::tuple<std::string, std::string>>*
        - m_is_console: const bool
        - m_players: std::vector<Player*>
        - m_cards: GameTile** = nullptr
        - m_nb_cards: unsigned short int = 0
        - m_status: GameStatus = GameStatus::NotStarted
        - m_scorer: Score

        + Game(is_console: const bool = false)
        + ~Game()
        + getSaveString() const: std::string
        + readCards(path: std::string = "tiles.cts"): void
        + play(): void
        + init(): void
        + getInfoConsole(): void
        + getInfoGX(): void
        + scoreGame(): void
        + getGameStatus() const: GameStatus
        + notify(code: unsigned int): void
        + restart(): void
        + quit(): void
    }

    Player *-- "0..1" PlayerBoard
    Player *-- "0..*" GameTile
    Player *-- "0..*" WildlifeToken

    Game --|> SalvableThing
    Game --|> NotifiableInterface
    Game *-- "1..4" Player
    Game *-- PlayerBoard
    Game *-- "41..81" GameTile
    Game *-- Score
    Game *-- Menu
}

package Gametools {
    package Abstract {
        abstract BaseClass{
            + BaseClass()
            + ~BaseClass()
        }

    abstract class DeckTile {
        -m_deck_tiles : std::vector<GameTile*> 
        -m_deck_token : std::vector<const WildlifeToken*> 
        -m_tiles[4] : GameTile* 
        -m_displayed_tokens[4] :  const WildlifeToken* 
        -getInstance() : static DeckTile& 
        -DeckTile();
        - {abstract} ~DeckTile()
        -m_id_token_to_rm : unsigned short int 
        -m_can_flush : bool
        -m_id_card_to_rm : unsigned short int 

        + getTile(unsigned short int i) : GameTile*
        + fillPlate() : int
        + canFlushWithoutNaturetoken() const : bool 
        + addTile(GameTile* tile) : void
        + addToken(const WildlifeToken* token) : void
        + shuffle() : void
        + clearTokens() : void
        + validateChanges() : void
        + getCouple(int id_card, int id_token = -1) : std::tuple<GameTile*, const WildlifeToken*> 
        }

        abstract NotifiableInterface {
            + NotifiableInterface()
            + {abstract} notify(unsigned int code) : void
        }

        abstract Printable {
            - bool m_is_graphic
            + {abstract} void print()
            + Printable()
        }

        abstract class SalvableThing {
            + SalvableThing();
            + {abstract} std::string getSaveString() const;
        }

        abstract class PlayerBoard {
            - m_pos_last_token : HexCell
            - m_pos_last_tile : HexCell

            - m_pointed_cell : HexCell
            - m_target : NotifiableInterface*

            + {static} int floorDiv(int n);
            + {static} axialToOffset(const HexCell& hex) : Offset
            + {static} offsetToAxial(const Offset& off) : HexCell
            + PlayerBoard()
            + show() : void
            + getSaveString() const : std::string
            + addTile(GameTile& tile) : void
            + addToken(const WildlifeToken* token, HexCell& pos_target) : void
            + removeLast() : void
            + hasNeighbour(const HexCell& pos) : bool
            + getPointedCell() const : HexCell
            + resetPointedCell() : void
            + setPointedCell(HexCell cell) : void
            + getTarget()const : NotifiableInterface*
            + getTile(int const &q, int const &r) const : GameTile* 
            + pointCell(int q, int r) : void
        }

        abstract TileHolder {
            - GameTile ***m_tiles
            - int m_size_x
            - int m_size_y

            + TileHolder(int size_x, int size_y)
            + ~TileHolder()
            + GameTile* getTile(int posx, int posy) const
            + void addTile(GameTile& tile, unsigned int* q, unsigned int* r, bool overwrite)
            + {abstract} void print();
        }

        BaseClass <|-- Printable

        DeckTile <|-- CDeckTile
        DeckTile <|-- GDeckCard

        Printable <|-- GameTile
        Printable <|-- PlayerBoard

        SalvableThing <|-- BaseClass
        SalvableThing <|-- Game
        SalvableThing <|-- GameTile
        SalvableThing <|-- PlayerBoard
        SalvableThing <|-- Player

        PlayerBoard <|-- TileHolder 
        PlayerBoard <|-- CPlayerBoard
        PlayerBoard <|-- GPlayerBoard
        PlayerBoard o--  "1..1" Player

        TileHolder <|-- DeckTile 
    }
    package Tiling {
        class GameTile {
            - Biome m_biomes[6]
            - unsigned char m_rotation
            - WildlifeToken *m_wltoken
            - Wildlife *m_possible_wltoken
            - int m_numtypes
            - const unsigned int m_id
            - GameTile(const unsigned int id, Biome biomes[6], Wildlife *type, int num_types, int posx, int posy)
            - ~GameTile()
            - GameTile& operator=(const GameTile& oth)
            - GameTile(const GameTile& oth)

            + Rotate(Rotation dir) : void
            + draw() : int
            + getID() const : unsigned int

            + setPos(int const &q, int const &r) : void 
            + getNbWildlife() const : int
            + getWildlife(unsigned short int nb) const : Wildlife 
            + GameTile(unsigned int id, Biome biomes[6], Wildlife *type, int num_types, int posx, int posy)
            + getBiome(unsigned short int number) const : Biome
            + getId() const : unsigned int
            + getToken() const : const WildlifeToken* 
            + setWildLifeToken(const WildlifeToken* wlt) : inline void 
            + matchesType(Wildlife type) const : bool
            + matchesType(Biome biome) const : bool
            + isKeystone(const std::string& description) const : bool 
            + show(unsigned short int size = 4) const : void

        }
        class HexCell {
            - int m_q;
            - int m_r;
            - {static} const std::vector<HexCell> m_directions;

            + HexCell(int q, int r)
            + int getQ() const
            + int getR() const
            + int getS() const

            + void setQ(const int& q)
            + void setR(const int& r)
            + HexCell operator+(const HexCell& other) const
            + HexCell operator-(const HexCell& other) const

            + HexCell getDirection(Direction d) const
            + HexCell getNeighbors(Direction d) const
            + std::vector<HexCell> getNeighbors() const
        }

        GameTile --> Background

        HexCell <|-- GameTile
    }

    class WildlifeToken {
        - Wildlife m_type;
        - int m_xdprintpos
        - int m_ydprintpos
        + WildlifeToken(Wildlife type, int x_dpos, int y_dpos)
    }
}



package Scoring {
    class Score {
        - {static} m_animals: std::vector<std::string>
        - m_active_card: WildlifeScoringStrategy*
        - m_scoring_cards: std::vector<std::unique_ptr<WildlifeScoringStrategy>>

        + Score()
        + getScoringCards() const: const std::vector<std::unique_ptr<WildlifeScoringStrategy>>&
        + obtainScore(board: const PlayerBoard&) const: std::vector<double>
        + obtainScore(board: const PlayerBoard&, strat: const TileScoringStrategy&) const: std::vector<double>
        + setStrategy(idx_card: size_t): void
        + configureCards(cards: const std::string&): void
    }

    abstract class ScoringStrategy {
        + computeScore(board: const PlayerBoard&) const: std::vector<double>
        + ~ScoringStrategy() = default
    }

    class TileScoringStrategy { 
        + TileScoringStrategy()
        + computeScore(board: const PlayerBoard&) const: std::vector<double>
    }

    abstract WildlifeScoringStrategy {
        + {abstract} void score(Cards card, Wildlife type)

    }

    class BearScoringCardA {
        + void score(Cards card, Wildlife type)
    }
    class BearScoringCardB {
        + void score(Cards card, Wildlife type)
    }
    class BearScoringCardC {
        + void score(Cards card, Wildlife type)
    }
    class BearScoringCardD {
        + void score(Cards card, Wildlife type)
    }

    ScoringStrategy <|-- TileScoringStrategy
    ScoringStrategy <|-- WildlifeScoringStrategy
    Score *-- ScoringStrategy

    WildlifeScoringStrategy --|> BearScoringCardA
    WildlifeScoringStrategy --|> BearScoringCardB
    WildlifeScoringStrategy --|> BearScoringCardC
    WildlifeScoringStrategy --|> BearScoringCardD

}

package Application {
    class QApplication {}

    class QWidget {}

    class App {
        + bool getIsConsole() const
        + {static} App& getInstance(int argc, char* argv[]);
        - App(const App& tar)
        - App& operator=(const App& tar)
        - bool m_is_console
        - App(int argc, char * argv[]
    }

    QApplication <|-- App
    QWidget <|-- GMenu
    QWidget <|-- WidgetHexBoard
    App *-- Game   
}


@enduml
